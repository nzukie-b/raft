#!/usr/bin/env python3

import argparse
import socket
import time
import json
import select
import struct
import math
import sys
import re
import struct
from re import split

# LOG_TO_FILE = True
LOG_TO_FILE = False
DEBUG = True
# DEBUG = False

if LOG_TO_FILE:
    f = open('log.txt', 'a')
    sys.stdout = f

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks',
                    type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

# origins
EGP = 'EGP'
IGP = 'IGP'
UNK = 'UNK'


##########################################################################################


class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks, asn):
        self.routes = []
        self.updates = []
        self.revokes = []
        self.relations = {}
        self.sockets = {}
        self.asn = asn
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG:
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(
                socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def __send_packet(self, packet, dest):
        socket = self.sockets[dest]
        socket.send(json.dumps(packet).encode())

    def __print_log(self, title,  value):
        if DEBUG:
            print(f'{title.upper()}: {value}')
        pass

    def __route_log(self, title, value):
        self.__print_log(title + " route", value)
        pass

#### ip2int and int2ip from https://stackoverflow.com/questions/5619685/ ####
    def __ip2bin(self, addr):
        temp = bin(struct.unpack("!I", socket.inet_aton(addr))[0])
        return temp

    def __int2ip(self, addr):
        return socket.inet_ntoa(struct.pack("!I", addr))
############################################################################

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []
        split_addr = [int(val) for val in daddr.split('.')]
        print(f'DEST: {daddr}\n')
        for route in self.routes:
            # self.__route_log('checking', route)
            netmask = [int(nmsk) for nmsk in route[NMSK].split('.')]
            network = [int(ntwk) for ntwk in route[NTWK].split('.')]
            res = True
            for ii in range(len(netmask) - 1):
                if netmask[ii] == 255:
                    res = res and split_addr[ii] == network[ii]
            if res and split_addr[3] in range(1, 255):
                outroutes.append(route)
        self.__route_log('found', route)
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        shortest = min([len(route[APTH]) for route in routes])
        outroutes = [route for route in routes if len(route[APTH]) == shortest]
        self.__route_log(APTH, outroutes)
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the highest localpref """
        lprf = 0
        # Highest localpref
        lprf = max([route[LPRF] if route[LPRF] >=
                   lprf else lprf for route in routes])
        # Routes with highest local pref
        outroutes = [route for route in routes if route[LPRF] == lprf]
        self.__route_log(LPRF, outroutes)
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = [route for route in routes if route[SORG]]
        if not outroutes:
            outroutes = routes
        self.__route_log(SORG, outroutes)
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        origin_types = {route[ORIG] for route in routes}
        if IGP in origin_types:
            outroutes = list(filter(lambda route: route[ORIG] == IGP, routes))
        elif EGP in origin_types:
            outroutes = list(filter(lambda route: route[ORIG] == EGP, routes))
        else:
            outroutes = list(filter(lambda route: route[ORIG] == UNK, routes))
        # self.__print_log(ORIG, outroutes)
        return outroutes

    def get_lowest_ip(self, routes):
        lowest_ip = min((int(self.__ip2bin(route[PEER]), 2) for route in routes))
        outroutes = [route for route in routes if int(self.__ip2bin(route[PEER]), 2) == lowest_ip]
        self.__route_log('Lowest IP', outroutes)
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        dest = routes[0][PEER]
        peer_to_peer = self.relations[srcif] == PEER and self.relations[dest] == PEER
        peer_to_prov = self.relations[srcif] == PEER and self.relations[dest] == PROV
        prov_to_peer = self.relations[srcif] == PROV and self.relations[dest] == PEER
        if peer_to_peer or peer_to_prov or prov_to_peer:
            return None
        return routes

    def get_longest_prefix(self, routes, daddr):
        """Find routes with the longest matching prefix"""
        outroutes = []
        longest_match = 0
        dest = int(self.__ip2bin(daddr), 2)
        # TODO: Better way to do this
        for route in routes:
            self.__route_log('checking prefix', route)
            route_ntwk = int(self.__ip2bin(route[NTWK]), 2)
            route_nmsk = int(self.__ip2bin(route[NMSK]), 2)
            route_prefix = route_ntwk & route_nmsk
            route_match = dest & route_prefix
            if route_match > longest_match:
                longest_match = route_match
        for route in routes:
            route_ntwk = int(self.__ip2bin(route[NTWK]), 2)
            route_nmsk = int(self.__ip2bin(route[NMSK]), 2)
            route_prefix = route_ntwk & route_nmsk
            route_match = dest & route_prefix
            if route_match == longest_match:
                outroutes.append(route)

        self.__route_log('longest prefix', outroutes)
        return outroutes


    def get_route(self, srcif, daddr) -> socket.SocketType:
        """	Select the best route for a given address	"""
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 0. Longest Prefix Matching
            routes = self.get_longest_prefix(routes, daddr)
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. IGP > EGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            routes = self.get_lowest_ip(routes)
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
            self.__route_log('FINAL', routes)
            peer = routes[0][PEER] if routes else None
            # self.__print_log(PEER, peer)
        return peer

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
        self.__print_log('forward', packet)
        dest = packet[DEST]
        peer = self.get_route(srcif, dest)
        if peer:
            self.__send_packet(packet, peer)
            return True
        return False

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        msg = packet[MESG]
        self.updates.append(msg)
        route_entry = {NTWK: msg[NTWK], NMSK: msg[NMSK], PEER: srcif, LPRF: msg[LPRF],
                       APTH: msg[APTH], ORIG: msg[ORIG], SORG: msg[SORG]}
        self.routes.append(route_entry)
        msg[APTH].append(self.asn)
        self.__send_updates(srcif, packet)
        return True

    def __send_updates(self, srcif, packet):
        """ Handle forwarding route announcements """
        networks = self.relations.keys()
        update_customers = self.relations[srcif] == PEER or self.relations[srcif] == PROV
        for network in networks:
            if network == srcif:
                # Don't send update to self
                continue
            elif update_customers and (self.relations[network] == PEER or self.relations[network] == PROV):
                # only update this routers customers
                continue
            # Send updates to neighbors
            new_dest = network
            temp = network.split('.')
            temp[3] = '1'
            new_src = '.'.join(temp)

            print(f'Update Packet Before: {packet}')
            packet[SRCE] = new_src
            packet[DEST] = new_dest
            print(f'Update Packet After: {packet}\n')
            self.__send_packet(packet, new_dest)
        return True

    def revoke(self, srcif, packet):
        """	handle revoke packets	"""
        new_routes = []
        msgs = packet[MESG]
        for msg in msgs:
            self.revokes.append(msg)
            for route in self.routes:
                route_is_peer = route[PEER] == srcif
                route_is_ntwk = route[NTWK] == msg[NTWK]
                route_is_nmsk = route[NMSK] == msg[NMSK]
                if route_is_peer and route_is_ntwk and route_is_nmsk:
                    continue
                new_routes.append(route)
        self.routes = new_routes
        return self.__send_updates(srcif, packet)

    def dump(self, packet):
        """	handles dump table requests	"""
        old_src = packet[SRCE]
        packet[SRCE] = packet[DEST]
        packet[DEST] = old_src
        packet[TYPE] = TABL
        msg = []
        for route in self.routes:
            temp = {NTWK: route[NTWK], NMSK: route[NMSK], PEER: route[PEER]}
            msg.append(temp)
        packet[MESG] = msg
        self.__print_log(MESG, msg)
        self.__print_log(TABL, self.routes)
        self.__send_packet(packet, old_src)
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        if packet[TYPE] == UPDT:
            return self.update(srcif, packet)
        elif packet[TYPE] == DATA:
            return self.forward(srcif, packet)
        elif packet[TYPE] == DUMP:
            return self.dump(packet)
        elif packet[TYPE] == RVKE:
            return self.revoke(srcif, packet)
        return False

    def send_error(self, srcif, packet):
        """ Send a no_route error message """
        # NO ROUTE
        temp = srcif.split('.')
        temp[3] = '1'
        new_src = '.'.join(temp)
        new_dest = packet[SRCE]

        packet[SRCE] = new_src
        packet[DEST] = new_dest
        packet[TYPE] = NRTE
        packet[MESG] = {}
        print(f'NO ROUTE: {packet}')
        self.__send_packet(packet, srcif)
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(srcif, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.networks, args.asn)
    router.run()
    if LOG_TO_FILE:
        f.close()
