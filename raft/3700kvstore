#!/usr/bin/env python3

import sys, socket, select, time, json, random, string, math
from constants import *
from decimal import *
from utils import *

# Your ID number
MY_ID = sys.argv[1]

# The ID numbers of all the other replicas
REPLICA_IDS = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
sock.connect(MY_ID)
#sys.stdout = open('log.txt', 'a+')
sys.stdout = open('log2.txt', 'a+')


last = 0

SELECT_WAIT_TIME = 0.01 # 10 milliseconds
TERMINATOR = b'}\n'
buffer = b''
CURRENT_TERM = 0
VOTED_FOR = None
LOG = []
LOCAL_STATE = dict()
REPLICA_LAST_INDEX = dict()

for r in REPLICA_IDS:
	REPLICA_LAST_INDEX[r] = (0, 0)

LEADER_ID = 'FFFF'
# Index of last log committed by leader
COMMIT_INDEX = 0
# Index of last log applied to LOCAL_STATE
LAST_APPLIED = 0
DEBUG = True


def format_msg(src, dst, leader, msg_type, m_id, key=None, value=None, candidate_id=None, vote_granted=None, entries=None, last_log_indx=0, last_log_term=0, last_local_log=None):
	global CURRENT_TERM, COMMIT_INDEX, LAST_APPLIED, REPLICA_LAST_INDEX, DEBUG
	if msg_type == GET:
		if key:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, KEY: key}
		else:
			if DEBUG:
				print(f'Invalid get. key missing')
	elif msg_type == PUT:
		if key and value:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, KEY: key, VALUE: value}
		elif key:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, KEY: key}
		elif value:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, VALUE: value}

	elif msg_type == FAIL or msg_type == REDIRECT:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, LAST_LOG_INDX: last_log_indx, LAST_LOG_TERM: last_log_term, LAST_LOCAL_LOG: last_local_log}

	elif msg_type == OK:
		if key and value:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, KEY: key, VALUE: value}
		elif value:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, VALUE: value}
		else:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, LAST_LOG_INDX:last_log_indx, LAST_LOG_TERM: last_log_term}
	elif msg_type == ELECT:
		# if vote_granted is None:
		# 	msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, TERM: CURRENT_TERM, C_ID: candidate_id}
		# else:
			msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, TERM: CURRENT_TERM, C_ID: candidate_id, VOTE_GRANTED: vote_granted,
				   LAST_LOG_TERM: last_log_term, LAST_LOG_INDX:last_log_indx}
	elif msg_type == APPEND_LOG:
		if len(LOG) > 0:
			last_log_indx = REPLICA_LAST_INDEX[dst][1] if last_log_indx == 0 else last_log_indx
			last_log_term = REPLICA_LAST_INDEX[dst][0] if last_log_term == 0 else last_log_term
			if DEBUG:
				print(f"{MY_ID} last log indx for {dst} ", last_log_indx)
				print(f"{MY_ID} last log term for {dst} ", last_log_term)

		entries_slice = entries[last_log_indx:] if len(entries) > 0 else []
		msg = {SRC: src, DST: dst, LEADER: leader, TYPE: msg_type, MID:m_id, TERM: CURRENT_TERM,
				LAST_LOG_INDX: last_log_indx, LAST_LOG_TERM: last_log_term, LOG_ENTRIES: entries_slice, LEADER_INDEX: COMMIT_INDEX}

	return msg


# Receive
def recv_msgs(sock, old_msgs):
	global buffer, DEBUG

	print("old messages", old_msgs)

	while True:
		fresh_buf = sock.recv(16384)
		# is this sock shutting down?
		if len(fresh_buf) > 0:
			break
		sock.connect(MY_ID)
		print("didn't receive anything from socket")

	buffer += fresh_buf

	# print("buffer", buffer )

	msgs = []
	# print("TERMINATOR", TERMINATOR)
	while TERMINATOR in buffer:
		position = buffer.find(TERMINATOR) + len(TERMINATOR)
		# print("retreiving from buffer", json.loads(buffer[:position - 1].decode()))
		msgs.append(json.loads(buffer[:position - 1].decode()))  # -1 to remove the \n, which json.loads won't want
		buffer = buffer[position:]
	#put_msgs = [msg for msg in msgs if msg[TYPE] == PUT]
	#for each in put_msgs:
		#print("PUT PUT", each)
	# new_msgs = [new_msg for new_msg in msgs if new_msg not in msgs_dealt_with]
	new_msgs = old_msgs + msgs
	return new_msgs

def send_msg(sock, msgs):
	global DEBUG
	# if DEBUG:
		# print(f'SENDING: {msgs}')

	for msg in msgs:
		if DEBUG:
			print("message: ", msg)
		sock.send(json.dumps(msg).encode() + b'\n')

def send_heartbeat(sock, replica_ids):
	heartbeat_ids = [''.join(random.choices(string.ascii_letters + string.digits, k=12)) for ii in range(len(replica_ids))]
	# Don't send self a heartbeat
	heartbeat_msgs = [format_msg(MY_ID, replica_id, LEADER_ID, APPEND_LOG, m_id, entries=[]) for replica_id, m_id in zip(replica_ids, heartbeat_ids) if replica_id != MY_ID]
	t1 = time.time()
	send_msg(sock, heartbeat_msgs)
	t2 = time.time()
	print("time to send heartbeats", t2 - t1)

def handle_get(sock, msg):
	global LEADER_ID, LOCAL_STATE, DEBUG
	if DEBUG:
		print(f"{msg[DST]} received a {msg[TYPE]} from {msg[SRC]}: {msg}")
		print("current leader during a get: ", LEADER_ID)
		print("message leader: ", msg[LEADER])
	if msg[LEADER] != MY_ID and LEADER_ID != 'FFFF':
		response = format_msg(msg[DST], msg[SRC], LEADER_ID, REDIRECT, msg[MID])
	elif msg[LEADER] == MY_ID:
		if DEBUG:
			print(f'{MY_ID} RETRIEVING VALUE FOR KEY: {msg[KEY]}')
		val = LOCAL_STATE.get(msg[KEY])
		if val:
			response = format_msg(msg[DST], msg[SRC], LEADER_ID, OK, msg[MID], value=val)
		else:
			if DEBUG:
				print(f'VALUE NOT FOUND FOR KEY {msg[KEY]}')
			response = format_msg(msg[DST], msg[SRC], LEADER_ID, FAIL, msg[MID])
	else:
		raise Exception("We should never see this")
	send_msg(sock, [response])

def handle_put(sock, msg):
	global LEADER_ID, LOG, COMMIT_INDEX, CURRENT_TERM, DEBUG
	other_msgs = []
	if DEBUG:
		print(f"{msg[DST]} received a {msg[TYPE]} from {msg[SRC]}: {msg}")
		print("current leader during a put: ", LEADER_ID)
		print("message leader: ", msg[LEADER])
	if msg[LEADER] != MY_ID and LEADER_ID != 'FFFF':
		response = format_msg(msg[DST], msg[SRC], LEADER_ID, REDIRECT, msg[MID])
	elif msg[LEADER] == MY_ID:
		# The leader appends the command to its log as a new entry,
		key = msg[KEY]
		val = msg[VALUE]
		entry = LogEntry(CURRENT_TERM, key, val)
		last_log = LOG[-1] if len(LOG) > 0 else None
		LOG.append(entry)
		# the leader includes the index and term of the entry in its log that immediately precedes the new entries
		replica_OKs = {MY_ID}
		# then issues AppendEntries RPCs in parallel to each of the other servers to replicate the entry

		put_timeout = random.choice(TIMEOUT_RANGE) / 1000
		quorum_start = time.time()
		while True:
			start_time = time.time()
			# replica_OKs should update in send_append_entries so we can keep using it as an arg
			received_OKs, received_msgs = send_append_entries(replica_OKs, start_time, last_log)
			if DEBUG:
				print("ok messages received", received_OKs)
			other_msgs = other_msgs + received_msgs
			if len(received_OKs) > ((len(REPLICA_IDS) + 1) // 2):
				break
		# Note: if we never get a majority we will be stuck in this loop :)
		# When the entry has been safely replicated, the leader applies the entry to its state machine
		if DEBUG:
			print(f'{MY_ID} STORING KEY: {key} VALUE: {val} REPLICATED BY {received_OKs}')
			print(f'Updating commit index to {max(len(LOG) - 1, 0)}')
		LOCAL_STATE[key] = val
		COMMIT_INDEX = max(len(LOG) - 1, 0)
		# Send heartbeat with updated commit index to other replicas
		send_heartbeat(sock, REPLICA_IDS)
		response = format_msg(msg[DST], msg[SRC], LEADER_ID, OK, msg[MID])

	elif msg[LEADER] == "FFFF":
		response = format_msg(msg[DST], msg[SRC], LEADER_ID, FAIL, msg[MID])
	else:
		raise Exception("We should never see this")
	send_msg(sock, [response])
	return other_msgs


def send_append_entries(replica_OKs, start_time, last_log):
	global LOG, REPLICA_LAST_INDEX, DEBUG
	# send append entries with data to all other replicas
	# should  leader send append entries to all replicas to prevent election from starting during this?
	replica_ids_not_responded = [r_id for r_id in REPLICA_IDS if r_id not in replica_OKs]
	msg_ids = [''.join(random.choices(string.ascii_letters + string.digits, k=12))
					for ii in range(len(replica_ids_not_responded))]
	# heartbeat_ids = [''.join(random.choices(string.ascii_letters + string.digits, k=12))
	# 				for ii in range(len(replica_OKs) - 1)]
	# last_log_term, last_log_indx = 0, 0
	append_entry_msgs = [format_msg(MY_ID, replica_id, LEADER_ID, APPEND_LOG, m_id, entries=LOG)
							for replica_id, m_id in zip(replica_ids_not_responded, msg_ids)]
	# TODO: DON'T INCLUDE OURSELF!
	# heartbeat_msgs = [format_msg(MY_ID, replica_id, LEADER_ID, APPEND_LOG, m_id, entries=[])
	# 					for replica_id, m_id in zip(replica_OKs, heartbeat_ids) if replica_id != MY_ID]
	if DEBUG:
		print("append entry message")
	t1 = time.time()
	send_msg(sock, append_entry_msgs)
	t2 = time.time()
	print("time to send append entry messages", t2 - t1)

	send_heartbeat(sock, replica_OKs)

	other_msgs = []
	# TODO: maybe change timeout length
	append_entries_timeout = random.choice(LOG_TIMEOUT) / 1000
	while True:
		ready = select.select([sock], [], [], SELECT_WAIT_TIME)[0]
		if sock in ready:
			t1 = time.time()
			new_msgs = recv_msgs(sock, other_msgs)
			t2 = time.time()
			print("time to receive append entries back", t2 - t1)
			other_msgs = []
			# then check if we have majority
			for msg in new_msgs:
				if msg[TYPE] == OK and msg[MID] in msg_ids:
					replica_OKs.add(msg[SRC])
					if DEBUG:
						print(f"before: ok message from {msg[SRC]} MID: {msg[MID]}, updating replica indexes", REPLICA_LAST_INDEX)
					REPLICA_LAST_INDEX[msg[SRC]] = (msg[LAST_LOG_TERM], msg[LAST_LOG_INDX])
					if DEBUG:
						print(f"after: ok message from {msg[SRC]} MID: {msg[MID]}, updating replica indexes", REPLICA_LAST_INDEX)
				elif msg[TYPE] == FAIL and msg[MID] in msg_ids:
					if DEBUG:
						print(f"before: fail message from {msg[SRC]} MID: {msg[MID]}, updating replica indexes", REPLICA_LAST_INDEX)
					# replica_current_term = msg[LAST_LOCAL_LOG].get(TERM) if msg[LAST_LOCAL_LOG] is not None else msg[LAST_LOG_TERM]
					# replica_last_local_index = LOG.index(msg[LAST_LOCAL_LOG]) if msg[LAST_LOCAL_LOG] is not None else msg[LAST_LOG_INDX]
					replica_log_term = msg[LAST_LOG_TERM]
					replica_last_log_index = msg[LAST_LOG_INDX]
					# replica_term = msg[LAST_LOG_TERM]
					# replica_index = msg[LAST_LOG_INDX]
					# replica_last_local_index = 0
					# try:
					# 	if LOG[replica_index].get(TERM) == replica_term:
					# 		replica_term = replica_term
					# 		replica_last_local_index = replica_index
					# except IndexError:
					# 	pass

					# for entry in LOG:
					# 	if entry.get(TERM) == replica_term:
					# 		replica_last_local_index = LOG.index(entry)
					# 		break

					REPLICA_LAST_INDEX[msg[SRC]] = (replica_log_term, replica_last_log_index)

					if DEBUG:
						print(f"after: fail message from {msg[SRC]} MID: {msg[MID]}, updating replica indexes", REPLICA_LAST_INDEX)
					pass
				else:
					if msg not in other_msgs:
						other_msgs.append(msg)
			stop_time = time.time()
			if round(Decimal(stop_time) - Decimal(start_time), 3) > append_entries_timeout:
				break
	return replica_OKs, other_msgs


def handle_log(sock, msg):
	global CURRENT_TERM, LOG, LOCAL_STATE, COMMIT_INDEX, VOTED_FOR, LEADER_ID, LAST_APPLIED, DEBUG
	success = True
	msg_term = msg[TERM]
	local_term = CURRENT_TERM
	if msg_term > CURRENT_TERM:
		LEADER_ID = msg[LEADER]
	update_term(msg_term)
	update_commit_index(msg)
	last_index = msg[LAST_LOG_INDX]
	log_entries = msg[LOG_ENTRIES]
	if DEBUG:
		print(f"{MY_ID}: current leader during handle log ", LEADER_ID)
		print("message leader: ", msg[LEADER])
		print("message id", msg[MID])

	# if received a heart beat
	if len(msg[LOG_ENTRIES]) == 0:
		return
	elif msg[SRC] != MY_ID:
		# reply false if msg term is less than local term
		if msg_term < local_term:
			if DEBUG:
				print("msg_term < CURRENT_TERM")
			success = False
		# if item at previous log index doesn't match the message's last log term
		elif len(LOG) == 0:
			success = True
		else:
			# TODO: this section might be causing issues with leader election for advanced
			try:
				if LOG[msg[LAST_LOG_INDX]].get(TERM) == msg[LAST_LOG_TERM]:
					success = True
				else:
					success = False
					if DEBUG:
						print("LOG[msg[LAST_LOG_INDX]] is not equal to msg[LAST_LOG_TERM]")
			except IndexError:
				if DEBUG:
					print(f"{MY_ID} index out of bounds error index: {msg[LAST_LOG_INDX]} size:{len(LOG)}")
				success = False

	last_local_log = None
	# find last index in log where we match for the given term
	# for entry in LOG:
	# 	if entry.get(TERM) < msg[LAST_LOG_TERM]:
	# 		last_local_log = entry
	# 	elif entry.get(TERM) == msg[LAST_LOG_TERM]:
	# 		if msg[LAST_LOG_INDX] >= LOG.index(entry):
	# 			last_local_log = entry
	# 		else:
	# 			# The last index is before the last entry in this log
	# 			break
	# 	else:
	# 		break
	if len(LOG) > 0:
		last_local_log = LOG[-1]

	if success:
		# make sure all of log matches
		LOG = LOG[0:last_index] + log_entries
		# update local state
		update_commit_index(msg)
		print(f'{MY_ID} LAST APPLIED {LAST_APPLIED}, COMMIT INDEX:: {COMMIT_INDEX}')
		# if LAST_APPLIED <= COMMIT_INDEX:
		# 	last_log = LAST_APPLIED
		# 	term = LOG[LAST_APPLIED].get(TERM)
			# # Missing entry in log
			# last_log = LAST_APPLIED
			# term = LOG[LAST_APPLIED].get(TERM)
			# fail_msg = format_msg(MY_ID, msg[SRC], LEADER_ID, FAIL, msg[MID], last_log_indx=last_log, last_log_term=term, last_local_log=last_local_log)
			# send_msg(sock, [fail_msg])
			# return success
		# send ok message
		log_index = LAST_APPLIED
		log_term = LOG[-1].get(TERM)
		ok_msg = format_msg(MY_ID, msg[SRC], LEADER_ID, OK, msg[MID], last_log_indx=log_index, last_log_term=log_term)
		send_msg(sock, [ok_msg])
	else:
		last_log = LOG.index(last_local_log) if last_local_log is not None else 0
		term = last_local_log.get(TERM) if last_local_log else 0
		fail_msg = format_msg(MY_ID, msg[SRC], LEADER_ID, FAIL, msg[MID], last_log_indx=last_log, last_log_term=term, last_local_log=last_local_log)
		send_msg(sock, [fail_msg])
	return success


def handle_elect(sock, msg):
	global VOTED_FOR, LEADER_ID, CURRENT_TERM, DEBUG, LOG, COMMIT_INDEX
	update_term(msg[TERM])
	last_index = COMMIT_INDEX
	try:
		last_term = LOG[last_index].get(TERM) if len(LOG) > 0 else 0
	except IndexError:
		last_term = LOG[-1].get(TERM) if len(LOG) > 0 else 0
	vote_granted = False
	if DEBUG:
		print(f"{msg[DST]} received a {msg[TYPE]} from {msg[SRC]}: {msg}")
	# If voted for is null or candidate_id and log is up to date grant vote. 
	if msg[TERM] >= CURRENT_TERM:
		#  New election called
		if VOTED_FOR is None:
			if msg[LAST_LOG_TERM] > last_term:
				vote_granted = True
			elif msg[LAST_LOG_TERM] == last_term:
				if msg[LAST_LOG_INDX] >= last_index:
					vote_granted = True
				else:
					print(f"{MY_ID} terms were equal, index too big last_index: {last_index}, msg_index: {msg[LAST_LOG_INDX]}")
					vote_granted = False
			else:
				vote_granted = False
				print("leader term was too small")
			if vote_granted:
				VOTED_FOR = msg[C_ID]
		else:
			print("already voted for this leader")
			vote_granted = VOTED_FOR == msg[C_ID]
	else:
		# reply false if msg[TERM] < CURRENT_TERM
		if msg[TERM] < CURRENT_TERM:
			vote_granted = False

	print("giving vote: ", vote_granted)
	if vote_granted:
		LEADER_ID = msg[C_ID]

	response = format_msg(msg[DST], msg[SRC], LEADER_ID, ELECT, msg[MID], candidate_id=msg[C_ID], vote_granted=vote_granted,
						  last_log_term=last_term, last_log_indx=last_index)
	send_msg(sock, [response])
	return vote_granted


def update_term(term):
	global CURRENT_TERM, VOTED_FOR, DEBUG, LEADER_ID
	"""Update CURRENT_TERM to the provided term, and clears VOTED_FOR"""
	if term < CURRENT_TERM:
		if DEBUG:
			print(f'Term does not decrease, current term: {CURRENT_TERM}')
	elif term > CURRENT_TERM:
		if DEBUG:
			print(f'UPDATING TERM FROM {CURRENT_TERM} to {term}')
		VOTED_FOR = None
		if DEBUG:
			print(f'CLEARING VOTED_FOR')
		LEADER_ID = 'FFFF'
		CURRENT_TERM = term
	else:
		print(f'CURRENT_TERM: {CURRENT_TERM}')
		CURRENT_TERM = term

def update_commit_index(msg):
	global COMMIT_INDEX, LAST_APPLIED
	new_commit_index = msg[LEADER_INDEX]
	if new_commit_index < COMMIT_INDEX:
		if DEBUG:
			print(f'Commit index does not decrease, current commit index: {COMMIT_INDEX}')
	elif new_commit_index > COMMIT_INDEX:
		if DEBUG:
			if DEBUG: print(f'Updating commit index from {COMMIT_INDEX} to {new_commit_index}') 
		if new_commit_index > COMMIT_INDEX:
			LEADER_ID = msg[LEADER]
			old_commit_index = COMMIT_INDEX
			COMMIT_INDEX = new_commit_index
			# Apply changes to local state, update last applied
			apply_commits(old_commit_index)
	return LAST_APPLIED

def apply_commits(start_index):
	global COMMIT_INDEX, LAST_APPLIED
	for i in range(start_index + 1, COMMIT_INDEX + 1):
		try:
			log_entry = LOG[i]
			if DEBUG:
				print(f'{MY_ID} APPLYING {log_entry} to LOCAL_STATE')
			LOCAL_STATE[log_entry.get(KEY)] = log_entry.get(VALUE)
			LAST_APPLIED = i
		except IndexError:
			print(f'{MY_ID} missing entry to apply commit at index {i}')


def handle_msgs(sock, msgs):
	unhandled_msgs = []
	contact = False
	for msg in msgs:
		if msg[TYPE] == GET and LEADER_ID != 'FFFF':
			handle_get(sock, msg)
		elif msg[TYPE] == PUT and LEADER_ID != 'FFFF':
			other_msgs = handle_put(sock, msg)
			unhandled_msgs = unhandled_msgs + other_msgs
		elif msg[TYPE] == ELECT:
			if MY_ID == msg[C_ID]: continue
			contact = handle_elect(sock, msg)
		elif msg[TYPE] == APPEND_LOG:
			handle_log(sock, msg)
			contact = True
		else:
			# Store other msgs for later if no leader
			if msg not in unhandled_msgs:
				unhandled_msgs.append(msg)
	return unhandled_msgs, contact


def begin_election(start, original_sock):
	global LEADER_ID, VOTED_FOR, CURRENT_TERM, LOG, REPLICA_LAST_INDEX, DEBUG, COMMIT_INDEX
	# Begin Election
	LEADER_ID = 'FFFF'
	if DEBUG:
		print("current term", CURRENT_TERM)
	print("term before update: ", CURRENT_TERM)
	print("term to maybe update to: ", CURRENT_TERM + 1)
	update_term(CURRENT_TERM + 1)
	print("term after update: ", CURRENT_TERM)

	if DEBUG:
		print("updated term", CURRENT_TERM)
	election_timeout = random.choice(TIMEOUT_RANGE) / 1000
	if DEBUG:
		print(f'{MY_ID} STARTING LEADER ELECTION FOR TERM {CURRENT_TERM}')
	VOTED_FOR = MY_ID
	votes = {MY_ID}
	fail_votes = set()
	index = len(LOG) - 1 if len(LOG) > 0 else 0
	term = LOG[index].get(TERM) if len(LOG) > 0 else 0
	msg_ids = [''.join(random.choices(string.ascii_letters + string.digits, k=12)) for ii in range(len(REPLICA_IDS))]
	vote_requests = [format_msg(MY_ID, replica_id, LEADER_ID, ELECT, m_id, candidate_id=MY_ID,
								last_log_term=term, last_log_indx=index) for replica_id, m_id in zip(REPLICA_IDS, msg_ids)]
	t1 = time.time()
	send_msg(original_sock, vote_requests)
	t2 = time.time()
	print("time to send vote requests", t2 - t1)
	# A candidate continues in this state until one of three things happens:
	all_servers = len(REPLICA_IDS) + 1
	msgs_to_keep = []
	last_log_term = 0
	leader_up_to_date = True
	while True:
		ready = select.select([sock], [], [], SELECT_WAIT_TIME)[0]
		if sock in ready:
			t1 = time.time()
			election_msgs = recv_msgs(sock, msgs_to_keep)
			t2 = time.time()
			print("time to receive election messages", t2 - t1)
			new_msgs_to_keep = [msg for msg in election_msgs if msg[MID] not in msg_ids and msg[TYPE] != ELECT and msg[TYPE] != APPEND_LOG]
			if DEBUG:
				print(f'non_election_msgs: {new_msgs_to_keep}')
			filtered_election_msgs = [msg for msg in election_msgs if msg not in new_msgs_to_keep]
			# if DEBUG:
				# print(f'filtered_election_msgs: {filtered_election_msgs}')
			msgs_to_keep = msgs_to_keep + new_msgs_to_keep
			for msg in filtered_election_msgs:
				msg_term = msg.get(TERM)
				if DEBUG:
					print(f'CANDIDATE {MY_ID} RECEIVED {msg}')
				if msg[TYPE] == ELECT and msg[VOTE_GRANTED] == True:
					# If the logs have last entries with different terms, then the log with the later term is more up-to-date
					if CURRENT_TERM < msg[LAST_LOG_TERM]:
						leader_up_to_date = False
					# If the logs end with the same term, then whichever log is longer is more up-to-date
					if CURRENT_TERM == msg[LAST_LOG_TERM]:
						if msg[LAST_LOG_INDX] > len(LOG) - 1:
							leader_up_to_date = False
					votes.add(msg[SRC])
					if DEBUG:
						print(f'Adding {msg[SRC]} to candidate votes {votes}')

				elif msg[TYPE] == ELECT and msg[VOTE_GRANTED] == False:
					fail_votes.add(msg[SRC])

				# see if majority of votes are fails
				if len(fail_votes) > (all_servers // 2):
					if DEBUG:
						print(f'CANDIDATE {MY_ID} failed election. votes: {fail_votes}')
					return msgs_to_keep

				# (a) It wins the election
				if len(votes) > (all_servers // 2):
					if leader_up_to_date:
						old_msgs = []
						if DEBUG:
							print(f'ELECTION WON BY CANDIDATE {MY_ID} with votes {votes}') 
							print(f'{MY_ID} updating commit index to {max(0, len(LOG) - 1)}') 
						LEADER_ID = MY_ID
						COMMIT_INDEX = max(0, len(LOG) - 1)

						if len(LOG) > 0:
							last_log_term = LOG[COMMIT_INDEX].get(TERM)

						# initialize all last values in replica last index dictionary to the index of the last in leader's log
						for r in REPLICA_IDS:
							REPLICA_LAST_INDEX[r] = (last_log_term, max(0, len(LOG) - 1))
						print(f'{MY_ID} Handling messages received during election')
						msgs_to_keep = [msg for msg in msgs_to_keep if msg[TYPE] != ELECT]
						
						old_msgs, contact = handle_msgs(sock, msgs_to_keep)
						print(f"election won sending heartbeat to {REPLICA_IDS}")
						send_heartbeat(sock, REPLICA_IDS)
						print("time to send success messages from election", t2 - t1)
					else:
						if DEBUG:
							print(f'CANDIDATE {MY_ID} was out of date, can not become leader')
					return old_msgs
				
				#  (b) Another server establishes itself as leader
				# If Leader's term is at least as large as the candidate's current term, the leader is recognized else ignore claim
				if (msg[TYPE] == APPEND_LOG) and (msg_term is not None and msg_term >= CURRENT_TERM):
					update_term(msg_term)
					if DEBUG:
						print(f'Acknowledging leadership claim by: {msg[SRC]} {msg}')
					LEADER_ID = msg[LEADER]
					VOTED_FOR = msg[LEADER]
					# print("term before update: ", CURRENT_TERM)
					# print("term to maybe update to: ", msg_term)
					# update_term(msg_term)
					# print("term after update: ", CURRENT_TERM)
					return msgs_to_keep
				elif (msg[TYPE] == ELECT) and (msg_term is not None and msg_term > CURRENT_TERM):
					update_term(term)
					# handle_log(sock, msg)
				# (c) a period of time goes by with no winner
				clock = time.time()
				total_time = round(Decimal(clock) - Decimal(start), 3)
				if total_time > election_timeout:
					if DEBUG:
						print(f'ELECTION BY {MY_ID} ENDED WITH NO WINNER')
					return msgs_to_keep
			continue

old_msgs = []
while True:
	ready = select.select([sock], [], [], SELECT_WAIT_TIME)[0]
	election_timeout = random.choice(TIMEOUT_RANGE) / 1000

	if sock in ready:
		if DEBUG:
			print("len with dups", len(old_msgs))
		# if len(old_msgs) > 0:
			# if DEBUG:
				# print("messages", old_msgs)
		no_dups_old_msgs = []
		for i in old_msgs:
			if i not in no_dups_old_msgs:
				no_dups_old_msgs.append(i)
		old_msgs = no_dups_old_msgs
		if DEBUG:
			print("len without dups", len(old_msgs))
		t1 = time.time()
		msgs = recv_msgs(sock, old_msgs)
		t2 = time.time()
		print("time to receive messages in sock", t2 - t1)

		contact = False

		print("hi", type(msgs))
		old_msgs, contact = handle_msgs(sock, msgs)
		if contact:
			last = time.time()
			continue
		if LEADER_ID == MY_ID:
			# Prevent other elections
			send_heartbeat(sock, REPLICA_IDS)

		clock = time.time()
		total_time = round(Decimal(clock) - Decimal(last), 3)
		if DEBUG:
			print(f'TIME TAKEN: {total_time}, ELECTION TIMEOUE: {election_timeout}')
		if total_time > election_timeout and LEADER_ID != MY_ID:
			non_election_msgs = begin_election(clock, sock)
			old_msgs = old_msgs + non_election_msgs
			VOTED_FOR = None
		last = clock
